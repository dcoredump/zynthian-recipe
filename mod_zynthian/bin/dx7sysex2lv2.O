#!/usr/bin/perl
#
# https://github.com/rogerallen/dxsyx/blob/master/dx7-sysex-format.txt
#

open(SYSEX,"<$ARGV[0]") || die ("Cannot open \'$ARGV[0]\': $!");
binmode(SYSEX);

# Header
sysread(SYSEX,$l,6);
($status,$id,$sub_status,$format,$byteMS,$byteLS)=unpack("CCCCCC",$l);
if($status==0xf0 && $id==0x43 && $format==0x00 && $byteMS==0x01 && $byteLS==0x1b)
{
	read_one_patch(6);
}
elsif($status==0xf0 && $id==0x43 && $format==0x09 && $byteMS==0x20 && $byteLS==0x00)
{
	for($p=0;$p<32;$p++)
	{
		read_one_patch(6+$p*128);
		print "Writing \'".$dx{'NAME'}."\'\n";
		write_one_lv2_patch();
	}
}
else
{
	print "Unknown format!\n";
}

close(SYSEX);

sub read_one_patch
{
	($start)=@_;
	seek(SYSEX,$start,0);
	sysread(SYSEX,$patch,128);

	for($op=5;$op>=0;$op--)
	{
		$dx{'OP_EG1'}[$op]=unpack("C",substr($patch,0+($op*16),1));
		$dx{'OP_EG2'}[$op]=unpack("C",substr($patch,1+($op*16),1));
		$dx{'OP_EG3'}[$op]=unpack("C",substr($patch,2+($op*16),1));
		$dx{'OP_EG4'}[$op]=unpack("C",substr($patch,3+($op*16),1));
		$dx{'OP_LV1'}[$op]=unpack("C",substr($patch,4+($op*16),1));
		$dx{'OP_LV2'}[$op]=unpack("C",substr($patch,5+($op*16),1));
		$dx{'OP_LV3'}[$op]=unpack("C",substr($patch,6+($op*16),1));
		$dx{'OP_LV4'}[$op]=unpack("C",substr($patch,7+($op*16),1));
		$dx{'OP_KBD_BRK_PT'}[$op]=unpack("C",substr($patch,8+($op*16),1));
		$dx{'OP_KBD_LFT_DEP'}[$op]=unpack("C",substr($patch,9+($op*16),1));
		$dx{'OP_KBD_RHT_DEP'}[$op]=unpack("C",substr($patch,10+($op*16),1));
		$tmp=unpack("C",substr($patch,11+($op*16),1));
		$dx{'OP_KBD_LFT_CUR'}[$op]=($tmp & 12);
		$dx{'OP_KBD_RHT_CUR'}[$op]=($tmp & 3);
		$tmp=unpack("C",substr($patch,12+($op*16),1));
		$dx{'OP_OSC_DET'}[$op]=($tmp & 120);
		$dx{'OP_KBD_RATE_SCALE'}[$op]=($tmp & 7);
		$tmp=unpack("C",substr($patch,13+($op*16),1));
		$dx{'OP_KEY_VEL_SENS'}[$op]=($tmp & 28);
		$dx{'OP_AMP_MOD_SENS'}[$op]=($tmp & 7);
		$dx{'OP_OUT_LVL'}[$op]=unpack("C",substr($patch,14+($op*16),1));
		$tmp=unpack("C",substr($patch,15,1));
		$dx{'OP_OSC_FRQ_CRS'}[$op]=($tmp & 31);
		$dx{'OP_OSC_MOD'}[$op]=($tmp & 1);
		$dx{'OP_OSC_FRQ_FIN'}[$op]=unpack("C",substr($patch,15+($op*16),1));
	}

	$dx{'PITCH_EG_RATE1'}=unpack("C",substr($patch,102,1));
	$dx{'PITCH_EG_RATE2'}=unpack("C",substr($patch,103,1));
	$dx{'PITCH_EG_RATE3'}=unpack("C",substr($patch,104,1));
	$dx{'PITCH_EG_RATE4'}=unpack("C",substr($patch,105,1));
	$dx{'PITCH_EG_LVL1'}=unpack("C",substr($patch,106,1));
	$dx{'PITCH_EG_LVL2'}=unpack("C",substr($patch,107,1));
	$dx{'PITCH_EG_LVL3'}=unpack("C",substr($patch,108,1));
	$dx{'PITCH_EG_LVL4'}=unpack("C",substr($patch,109,1));
	$dx{'ALG'}=(unpack("C",substr($patch,110,1)) & 31);
	$tmp=unpack("C",substr($patch,111,1));
	$dx{'OSC_KEY_SYNC'}=($tmp & 8);
	$dx{'FEEDBACK'}=($tmp & 7);
	$dx{'LFO_SPD'}=(unpack("C",substr($patch,112,1)) & 127);
	$dx{'LFO_DEL'}=(unpack("C",substr($patch,113,1)) & 127);
	$dx{'LFO_PITCH_MOD_DEP'}=(unpack("C",substr($patch,114,1)) & 127);
	$dx{'LFO_AMP_MOD_DEP'}=(unpack("C",substr($patch,115,1)) & 127);
	$tmp=unpack("C",substr($patch,116,1));
	$dx{'LFO_PITCH_MOD_SENS'}=($tmp & 110);
	$dx{'LFO_WAVE'}=($tmp & 14);
	$dx{'LFO_KEY_SYNC'}=($tmp & 1);
	$dx{'TRANSPOSE'}=(unpack("C",substr($patch,117,1)) & 63);
	$dx{'NAME'}=substr($patch,118,10);
	$dx{'NAME'}=~tr/ /_/;
	$dx{'NAME'}=~s/\"//g;
	$dx{'NAME'}=~tr/\//-/;
}

sub write_one_lv2_patch
{
	$dname="dexed-".$dx{'NAME'};
	print "!!!".$dname."!!!\n";
	mkdir($dname)||die("Cannot create \'$dname\': $!\n");

	open(MANIFEST,">$dname/manifest.ttl")||die("Cannot open \'$dname/manifest.ttl\': $!\n");
	print MANIFEST "\@prefix atom: <http://lv2plug.in/ns/ext/atom#> .\n";
	print MANIFEST "\@prefix lv2: <http://lv2plug.in/ns/lv2core#> .\n";
	print MANIFEST "\@prefix pset: <http://lv2plug.in/ns/ext/presets#> .\n";
	print MANIFEST "\@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n";
	print MANIFEST "\@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n";
	print MANIFEST "\@prefix state: <http://lv2plug.in/ns/ext/state#> .\n";
	print MANIFEST "\@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n";
	print MANIFEST "\n";
	print MANIFEST "<".$dx{'NAME'}.".ttl>\n";
	print MANIFEST "\n";
	print MANIFEST "        lv2:appliesTo <https://github.com/asb2m10/dexed> ;\n";
	print MANIFEST "        a pset:Preset ;\n";
	print MANIFEST "        rdfs:seeAlso <".$dx{'NAME'}.".ttl> .\n";
	close(MANIFEST);

	open(TTL,">$dname/".$dx{'NAME'}.".ttl")||die("Cannot open \'$dname/".$dx{'NAME'}.".ttl\': $!\n");
	print TTL "\@prefix atom: <http://lv2plug.in/ns/ext/atom#> .\n";
	print TTL "\@prefix lv2: <http://lv2plug.in/ns/lv2core#> .\n";
	print TTL "\@prefix pset: <http://lv2plug.in/ns/ext/presets#> .\n";
	print TTL "\@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n";
	print TTL "\@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n";
	print TTL "\@prefix state: <http://lv2plug.in/ns/ext/state#> .\n";
	print TTL "\@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n";
	print TTL "\n";
	print TTL "<>\n";
	print TTL "lv2:appliesTo <https://github.com/asb2m10/dexed> ;\n";
	print TTL "rdfs:label  \"".$dx{'NAME'}."\" ;\n";
	print_port("cutoff","0.0");
	print_port("resonance","0.0");
	print_port("output","1.0");
	print_port("algorithm",$dx{'ALG'},0);
	print_port("feedback",$dx{'FEEDBACK'},0);
	print_port("osc_key_sync",$dx{'OSC_KEY_SYNC'},0);
	print_port("lfo_speed",$dx{'LFO_SPD'},0);
	print_port("lfo_delay",$dx{'LFO_DEL'},0);
	print_port("lfo_pm_depth",$dx{'LFO_PITCH_MOD_DEP'},0);
	print_port("lfo_am_depth",$dx{'LFO_AMP_MOD_DEP'},0);
	print_port("lfo_key_sync",$dx{'LFO_KEY_SYNC'},0);
	print_port("lfo_wave",$dx{'LFO_WAVE'},0);
	print_port("middle_c",$dx{'TRANSPOSE'},0);
	print_port("p_mode_sens_",$dx{'LFO_PITCH_MOD_SENS'},0);
	print_port("pitch_eg_rate_1",$dx{'PITCH_EG_RATE1'},0);
	print_port("pitch_eg_rate_2",$dx{'PITCH_EG_RATE2'},0);
	print_port("pitch_eg_rate_3",$dx{'PITCH_EG_RATE3'},0);
	print_port("pitch_eg_rate_4",$dx{'PITCH_EG_RATE4'},0);
	print_port("pitch_eg_level_1",$dx{'PITCH_EG_LVL1'},0);
	print_port("pitch_eg_level_2",$dx{'PITCH_EG_LVL2'},0);
	print_port("pitch_eg_level_3",$dx{'PITCH_EG_LVL3'},0);
	print_port("pitch_eg_level_4",$dx{'PITCH_EG_LVL4'},0);
	for($i=0;$i<6;$i++)
	{
		print_port("op".($i+1)."_eg_rate_1",$dx{'OP_EG1'}[$i],0);
		print_port("op".($i+1)."_eg_rate_2",$dx{'OP_EG2'}[$i],0);
		print_port("op".($i+1)."_eg_rate_3",$dx{'OP_EG3'}[$i],0);
		print_port("op".($i+1)."_eg_rate_4",$dx{'OP_EG4'}[$i],0);
		print_port("op".($i+1)."_eg_level_1",$dx{'OP_LV1'}[$i],0);
		print_port("op".($i+1)."_eg_level_2",$dx{'OP_LV2'}[$i],0);
		print_port("op".($i+1)."_eg_level_3",$dx{'OP_LV3'}[$i],0);
		print_port("op".($i+1)."_eg_level_4",$dx{'OP_LV4'}[$i],0);
		print_port("op".($i+1)."_output_level",$dx{'OP_OUT_LVL'}[$i],0);
		print_port("op".($i+1)."_mode",$dx{'OP_OSC_MOD'}[$i],0);
		print_port("op".($i+1)."_f_coarse",$dx{'OP_OSC_FRQ_CRS'}[$i],0);
		print_port("op".($i+1)."_f_fine",$dx{'OP_OSC_FRQ_FIN'}[$i],0);
		print_port("op".($i+1)."_osc_detune",$dx{'OP_OSC_DET'}[$i],0);
		print_port("op".($i+1)."_break_point",$dx{'OP_KBD_BRK_PT'}[$i],0);
		print_port("op".($i+1)."_l_scale_depth",$dx{'OP_KBD_LFT_DEP'}[$i],0);
		print_port("op".($i+1)."_r_scale_depth",$dx{'OP_KBD_RHT_DEP'}[$i],0);
		print_port("op".($i+1)."_l_key_scale",$dx{'OP_KBD_LFT_CUR'}[$i],0);
		print_port("op".($i+1)."_r_key_scale",$dx{'OP_KBD_RHT_CUR'}[$i],0);
		print_port("op".($i+1)."_rate_scaling",$dx{'OP_KBD_RATE_SCALE'}[$i],0);
		print_port("op".($i+1)."_a_mod_sens_",$dx{'OP_AMP_MOD_SENS'}[$i],0);
		print_port("op".($i+1)."_key_velocity",$dx{'OP_KEY_VEL_SENS'}[$i],1);
	}
	close(TTL);
}

sub print_port
{
	($port_name,$port_val,$last)=@_;

	print TTL "        lv2:port [\n";
	print TTL "                lv2:symbol \"".$port_name."\" ;\n";
	print TTL "                pset:value ".$port_val." ;\n";
	if($last==0)
	{
		print TTL "        ] ;\n";
	}
	else
	{
		print TTL "        ] .\n";
	}
		
}
